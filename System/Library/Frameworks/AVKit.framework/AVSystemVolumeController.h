/*
                       * This header is generated by classdump-dyld 1.5
                       * on Wednesday, November 11, 2020 at 12:38:48 PM Eastern Standard Time
                       * Operating System: Version 14.2 (Build 18B92)
                       * Image Source: /System/Library/Frameworks/AVKit.framework/AVKit
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
                       */

#import <AVKit/AVVolumeController.h>

@class NSNumber, NSString, AVSystemController;

@interface AVSystemVolumeController : NSObject <AVVolumeController> {

	BOOL _changingVolume;
	BOOL _currentRouteHasVolumeControl;
	BOOL _EUVolumeLimitEnabled;
	BOOL _EUVolumeLimitOverridden;
	BOOL _volumeChangesThrottled;
	BOOL _canOverrideEUVolumeLimit;
	BOOL _fullyInitialized;
	float _EUVolumeLimit;
	float _volume;
	NSNumber* _targetVolumeInternal;
	NSNumber* _maximumTargetVolumeSinceChangingVolumeBegan;
	NSString* _volumeCategory;
	AVSystemController* _sharedSystemController;

}

@property (assign,getter=isChangingVolume,nonatomic) BOOL changingVolume;                                //@synthesize changingVolume=_changingVolume - In the implementation block
@property (assign,nonatomic) BOOL currentRouteHasVolumeControl;                                          //@synthesize currentRouteHasVolumeControl=_currentRouteHasVolumeControl - In the implementation block
@property (assign,nonatomic) float EUVolumeLimit;                                                        //@synthesize EUVolumeLimit=_EUVolumeLimit - In the implementation block
@property (assign,getter=isEUVolumeLimitEnabled,nonatomic) BOOL EUVolumeLimitEnabled;                    //@synthesize EUVolumeLimitEnabled=_EUVolumeLimitEnabled - In the implementation block
@property (assign,getter=isEUVolumeLimitOverridden,nonatomic) BOOL EUVolumeLimitOverridden;              //@synthesize EUVolumeLimitOverridden=_EUVolumeLimitOverridden - In the implementation block
@property (assign,nonatomic) float volume;                                                               //@synthesize volume=_volume - In the implementation block
@property (assign,nonatomic) BOOL volumeChangesThrottled;                                                //@synthesize volumeChangesThrottled=_volumeChangesThrottled - In the implementation block
@property (assign,nonatomic) BOOL canOverrideEUVolumeLimit;                                              //@synthesize canOverrideEUVolumeLimit=_canOverrideEUVolumeLimit - In the implementation block
@property (nonatomic,retain) NSNumber * targetVolumeInternal;                                            //@synthesize targetVolumeInternal=_targetVolumeInternal - In the implementation block
@property (nonatomic,retain) NSNumber * maximumTargetVolumeSinceChangingVolumeBegan;                     //@synthesize maximumTargetVolumeSinceChangingVolumeBegan=_maximumTargetVolumeSinceChangingVolumeBegan - In the implementation block
@property (nonatomic,readonly) NSString * volumeCategory;                                                //@synthesize volumeCategory=_volumeCategory - In the implementation block
@property (nonatomic,retain) AVSystemController * sharedSystemController;                                //@synthesize sharedSystemController=_sharedSystemController - In the implementation block
@property (assign,getter=isFullyInitialized,nonatomic) BOOL fullyInitialized;                            //@synthesize fullyInitialized=_fullyInitialized - In the implementation block
@property (nonatomic,readonly) float effectiveVolumeLimit; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)volumeController;
+(id)windowSceneVolumeHUDAssertions;
-(float)EUVolumeLimit;
-(void)setVolume:(float)arg1 ;
-(void)setFullyInitialized:(BOOL)arg1 ;
-(id)init;
-(float)volume;
-(float)effectiveVolumeLimit;
-(BOOL)isEUVolumeLimitEnabled;
-(BOOL)currentRouteHasVolumeControl;
-(void)beginChangingVolumeForWindowSceneSessionID:(id)arg1 ;
-(void)endChangingVolume;
-(void)setClientWithIdentifier:(id)arg1 prefersSystemVolumeHUDHidden:(BOOL)arg2 forWindowSceneSessionWithIdentifier:(id)arg3 ;
-(void)setTargetVolume:(float)arg1 ;
-(BOOL)isChangingVolume;
-(void)_removeVolumeHUDAssertionsForClientID:(id)arg1 ;
-(id)_windowSceneIdentifiersWithVolumeHUDAssertions;
-(void)_observeSystemController;
-(void)setSystemVolumeHUDEnabled:(BOOL)arg1 forWindowSceneSessionIdentifier:(id)arg2 ;
-(void)_postNotificationForNameIfFullyInitialized:(id)arg1 userInfo:(id)arg2 ;
-(void)_unobserveSystemController;
-(void)_handleSystemControllerServerDiedNotification;
-(void)_handleEUVolumeLimitDidChangeNotification:(id)arg1 ;
-(void)_handleSystemVolumeDidChangeNotification:(id)arg1 ;
-(void)_handleCurrentRouteHasVolumeControlDidChangeNotification:(id)arg1 ;
-(void)_applyProposedVolumeIfNeeded;
-(void)_applyProposedVolumeImmediately;
-(void)_performOnMainThread:(/*^block*/id)arg1 ;
-(void)setChangingVolume:(BOOL)arg1 ;
-(void)setCurrentRouteHasVolumeControl:(BOOL)arg1 ;
-(void)setEUVolumeLimitEnabled:(BOOL)arg1 ;
-(BOOL)isEUVolumeLimitOverridden;
-(void)setEUVolumeLimitOverridden:(BOOL)arg1 ;
-(BOOL)volumeChangesThrottled;
-(void)setVolumeChangesThrottled:(BOOL)arg1 ;
-(BOOL)canOverrideEUVolumeLimit;
-(void)setCanOverrideEUVolumeLimit:(BOOL)arg1 ;
-(NSNumber *)targetVolumeInternal;
-(void)setTargetVolumeInternal:(NSNumber *)arg1 ;
-(NSNumber *)maximumTargetVolumeSinceChangingVolumeBegan;
-(void)setMaximumTargetVolumeSinceChangingVolumeBegan:(NSNumber *)arg1 ;
-(NSString *)volumeCategory;
-(void)setSharedSystemController:(AVSystemController *)arg1 ;
-(AVSystemController *)sharedSystemController;
-(BOOL)isFullyInitialized;
-(void)setEUVolumeLimit:(float)arg1 ;
-(void)dealloc;
@end

